openapi: '3.0.0'
info:
  version: '0.1'
  title: "API for AMOS5 Financial QuickCheck"
  description: defines endpoints for resource "Product"

paths:
  /products/{productID}:
    get:
      summary: retrieve data for one single product
      parameters:
        - $ref: '#/components/parameters/productID'
      responses:
        200:
          description: JSON containing updated product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    put:
      summary: updates product with given productID
      parameters:
        - $ref: '#/components/parameters/productID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProduct'
      responses:
        200:
          description: Update successful
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
#    delete:
#      summary: deletes product with given productID
#      parameters:
#        - $ref: '#/components/parameters/productID'
#      responses:
#        200:
#          description: product deleted successfully
#        401:
#          $ref: '#/components/responses/401unauthorized'
#        403:
#          $ref: '#/components/responses/403forbidden'
#        404:
#          $ref: '#/components/responses/404notfound'
#        '5XX':
#          $ref: '#/components/responses/5XXserverError'

  /projects/{projectID}/products:
    get:
      summary: retrieves all products of given projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/productAreaID'
      responses:
        200:
          description: JSON containing list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    post:
      summary: creates a new product for projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        description: JSON containing product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProduct'
      responses:
        201:
          description: JSON containing product data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'


components:
  parameters:
    projectID:
      name: projectID
      in: path
      description: unique project ID
      required: true
      schema:
        type: integer
    productID:
      name: productID
      in: path
      required: true
      description: unique product ID
      schema:
        type: integer
    productAreaID:
      name: productAreaID
      in: query
      required: false
      description: unique product area ID
      schema:
        type: integer


  schemas:
    productName:
      type: string
      example: "Optionen"
    productAreaID:
      type: integer
      description: unique product area ID
      example: "6"
    createProduct:
      type: object
      required:
        - productName
        - productAreaID
      properties:
        productName:
          $ref: '#/components/schemas/productName'
        productAreaID:
          $ref: '#/components/schemas/productAreaID'
        productVariations:
          type: array
          items:
            $ref: '#/components/schemas/productVariation'
    productVariation:
      type: object
      required:
        - productName
      properties:
        productName:
          $ref: '#/components/schemas/productName'
    product:
      type: object
      properties:
        productID:
          type: integer
          example: 111
        productName:
          $ref: '#/components/schemas/productName'
        productArea:
          properties:
            id:
              $ref: '#/components/schemas/productAreaID'
            name:
              type: string
              example: "Kredit"
            category:
              type: string
              example: "Privat"
        projectID:
          type: integer
          example: 1
        parentID:
          type: integer
          example: 10
          description: return value of 0 indicates that product does not have a parent
        progressComplexity:
          type: integer
          example: 23
          description: returns a value between 0 and 100, which indicates the progress of the complexity rating
        progressEconomic:
          type: integer
          example: 89
          description: returns a value between 0 and 100, which indicates the progress of the economic rating
    updateProduct:
      type: object
      properties:
        productName:
          $ref: '#/components/schemas/productName'

  responses:
    5XXserverError:
      description: Internal error
    404notfound:
      description: Resource does not exist
    403forbidden:
      description: User is not authorized to access this resource
    401unauthorized:
      description: User not authenticated
    400badrequest:
      description: Input is missing/incorrect
    genericError:
      description: Error