openapi: '3.0.0'
info:
  description: Project API for AMOS5 Financial QuickCheck
  version: '0.1'
  title: "Project API"

paths:
  /project:
    get:
      summary: retrieves all projects accessible to the user
      responses:
        200:
          description: JSON containing projects
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    post:
      summary: creates a project with specified projectName
      requestBody:
        description: Project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        200:
          description: project created successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



  /project/{projectID}:
    get:
      summary: return project with the given projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: JSON containing project data
          content:
            application/json:
              schema:
                $ref: '#components/schemas/project'
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

    delete:
      summary: deletes all data of project with specified projectID
      parameters:
      - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: project deleted successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



  /project/{projectID}/product:
    get:
      summary: retrieves all product data of project with specified projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: JSON containing list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

    post:
      summary: creates a product
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        description: Definition of the new Product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        200:
          description: Product created successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



  /project/{projectID}/product/{productID}:
    delete:
      summary: deletes product
      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/productID'
      responses:
        200:
          description: product deleted successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



  /project/{projectID}/product/{productID}/rating:
    get:
      summary: retrieves ratings for a specified product
      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/productID'
      responses:
        200:
          description: JSON containing all product ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/rating'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



  /project/{projectID}/product/{productID}/rating/{ratingID}:
    post:
      summary: adds data for one specific data
      requestBody:
        description: Rating object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rating'

      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/productID'
        - $ref: '#/components/parameters/ratingID'
      responses:
        200:
          description: product rating successful
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'



components:
  parameters:
    ratingID:
      name: ratingID
      in: path
      required: true
      description: unique product rating ID
      schema:
        type: integer
    productID:
      name: productID
      in: path
      required: true
      description: unique Product ID
      schema:
        type: integer
    projectID:
      name: projectID
      in: path
      description: unique project ID
      required: true
      schema:
        type: integer

  schemas:
    rating:
      type: object
      properties:
        answer:
          type: string
        category:
          type: string
          enum:
            - low
            - mid
            - high
        annotation:
          type: string
        reference: # link zu referenzdatei
          type: object
    product:
      type: object
      properties:
        property:
          type: integer
    project:
      type: object
      properties:
        creatorID:
          type: integer
        name:
          type: string
        members:
          type: array
          example: [1, 2]
        areas:
          type: array
          example: ['credit']

  responses:
    5XXserverError:
      description: Internal error
      content:
        application/json:
          schema:
            type: string
    403forbidden:
      description: User is not authorized to access this resource
      content:
        application/json:
          schema:
            type: string
    401unauthorized:
      description: User not authenticated
      content:
        application/json:
          schema:
            type: string
    genericError:
      description: Error
