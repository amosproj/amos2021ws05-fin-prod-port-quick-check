swagger: '3.0'
info:
  description: API for projects of the AMOS5 Financial Quick Check
  version: 0.1
  title: "Financial Quick Check API for projects"
  # Contact info for development team
   contact:
     email: ber-amos-proj5@group.riehle.org


paths:
  /project:
    get:
      summary: retrieves all assigned projects of user with specified userID
      responses:
        200:
          description: JSON containing projects
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    post:
      summary: creates a project with specified projectName
      requestBody:
        description:
        required: true
        content:
          application/json:
#            schema: (userID, projectName, produktbereiche)
#              $ref: '#/project
      # - in: query
      #   name: authentication token
      #   description: mandatory authentication token for access validation
      #   required: true
      #   type: string
      responses:
        200:
          description: project created successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'


  /project/{projectID}:
    get:
      summary: retrieves all data of project with specified projectID
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: JSON containing project data
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

    delete:
      summary: deletes all data of project with specified projectID
      parameters:
      - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: project deleted successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
  /project/{projectID}/product:
    get:
      summary: retrieves all product data of project with specified projectID
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: JSON containing list of products
        401: 
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

    post:
      summary: creates a product
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        description:
        required: true
        content:
          application/json:
      #            schema: (productName)
      #              $ref: '#/product
      # - in: query
      #   name: authentication token
      #   description: mandatory authentication token for access validation
      #   required: true
      #   type: string
      responses:
        200:
          description: Product created successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
  /project/{projectID}/product/{productID}:
    delete:
      summary: deletes product
      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/productID'
      responses:
        200:
          description: product deleted successfully
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
  /project/{projectID}/product/{productID}/rating:
    get:
      summary: retrieves data for "wirtschaftliche Bewertung" and "Komplexitätsbewertung" for specified productID
      produces:
        - application/json
      parameters:
        - in: path
          name: projectID
          description: mandatory name for project
          required: true
          type: integer
        - in: path
          name: productID
          description: mandatory name for project
          required: true
          type: integer
      responses:
        200:
          description: JSON containing all product ratings 
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

    post:
      summary: adds data for "wirtschaftliche Bewertung" and "Komplexitätsbewertung" for specified productID
      produces:
        - application/json
      parameters:
        - in: path
          name: projectID
          description: mandatory name for project
          required: true
          type: integer
        - in: path
          name: productID
          description: mandatory name for project
          required: true
          type: integer
      responses:
        200:
          description: successful operation
        404:
          description: not found
        500:
          description: internal error
  /project/{projectID}/product/{productID}/rating/{ratingID}:
    post:
      summary: adds data for one specific data
      produces:
        - application/json
      parameters:
        - in: path
          name: projectID
          description: mandatory name for project
          required: true
          type: integer
        - in: path
          name: productID
          description: mandatory name for project
          required: true
          type: integer
        - in: path
          name: ratingID
          description: mandatory name for project
          required: true
          type: integer
      responses:
        200:
          description: product rating successful 
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'


components: 
  parameters:
    productID:
      name: productID
      in: query
      required: true
      description: unique Product ID
      schema:
        type: integer

    projectID:
      name: projectID
      in: path
      description: unique project ID
      required: true
      schema:
        type: integer

  schemas:
      product:
        type: object
        properties:
          property:
            type: integer
      project:
        type: object
        properties:
          creatorID:
            type: integer
          name:
            type: string
          members:
            type: array
            example: [1, 2]
          areas:
            type: array
            example: ['credit']

  responses:
    5XXserverError:
      description: Internal error
      content:
        application/json:
          schema:
            type: string
    403forbidden:
      description: User is not authorized to access this resource
      content:
        application/json:
          schema:
            type: string
    401unauthorized:
      description: User not authenticated
      content:
        application/json:
          schema:
            type: string
    genericError: 
      description: Error
