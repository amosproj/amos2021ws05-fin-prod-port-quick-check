openapi: '3.0.0'
info:
  version: "0.3"
  title: API for AMOS5 Financial QuickCheck
  description: defines endpoints for resource "Project"

paths:
  /projects:
    get:
      summary: retrieves all projects
      responses:
        200:
          description: JSON containing all projects
          content:
              application/json:
                schema:
                  type: array
                  items:
                    '$ref': '#/components/schemas/smallProject'
        401:
          $ref: '#/components/responses/401unauthorized'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    post:
      summary: creates a new project
      requestBody:
        description: Project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProject'
      responses:
        201:
          description: JSON containing project meta data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProject'
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
  /projects/{projectID}:
    get:
      summary: returns project with given projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        200:
          description: JSON containing project meta data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        401:
          $ref: '#/components/responses/401unauthorized'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    put: 
      summary: updates project with given projectID
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        description: Project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProject'
      responses:
        200:
          description: project updated successfully
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

  /productareas:
    get:
      summary: retrieves all available product areas 
      responses:
        200:
          description: JSON containing list of all product areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/productArea'
        404:
          $ref: '#/components/responses/404notfound'

  /projects/{projectID}/users:
    post:
      summary: assigns users to projectID
      requestBody:
        description: JSON containing user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProject'
      responses:
        201:
          description: "users successfully assigned to project"
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    put:
      summary: updates users for projectID
      requestBody:
        description: JSON containing user data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/userProject'
      responses:
        200:
          $ref: '#/components/schemas/userProject'
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    delete:
      summary: unassigns user from project
      requestBody:
        description: JSON containing user data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/deleteUserProject'
      responses:
        200:
          description: "users successfully unassigned from project"
        400:
          $ref: '#/components/responses/400badrequest'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'


components:
  parameters:
    projectID:
      name: projectID
      in: path
      description: unique project ID
      required: true
      schema:
        type: integer

  schemas:
    smallProject:
      type: object
      properties:
        projectID:
          type: integer
        projectName:
          type: string
    createProject:
        required:
          - creatorID
          - projectName
          - productAreas
          - members
        properties:
          creator:
            type: string
            description: user email address
            example: "test@test.com"
          projectName:
            type: string
            example: "DKB"
          productAreas:
            type: array
            required: true
            example: [ 1 ]
            items:
              type: integer
              description: unique identifiers of product areas
          members:
            type: array
            items:
              $ref: '#/components/schemas/user'
    createdProject:
      properties:
        projectID:
          type: integer
          description: unique project ID
          example: 10
        creator:
          type: string
          description: user email address
          example: "test@test.com"
        projectName:
          type: string
          example: "DKB"
        productAreas:
          type: array
          items:
            $ref: '#/components/schemas/productArea'


    updateProject:
      properties:
        projectName:
          type: string
          example: "DKB"
        productAreas:
          type: array
          required: true
          example: [ 1, 2 ,3 ]
          items:
            type: integer
        members:
          type: array
          items:
            $ref: '#/components/schemas/user'
    project:
      type: object
      properties:
        projectID:
          type: integer
        creatorID:
          type: string
          description: UUID of user who creates project
          example: "2375e026-d348-4fb6-b42b-891a76758d5d"
        projectName:
          type: string
          example: "DKB"
        members:
          type: array
          items:
            $ref: '#/components/schemas/user'
        productAreas:
          type: array
          items:
            $ref: '#/components/schemas/productArea'
    user:
      properties:
        userEmail:
          type: string
        userName:
          type: string
        role:
          type: string
          required: true
          enum: [ CLIENT, PROJECT_MANAGER, ADMIN ]
    userProject:
      type: object
      required:
        - role
        - userEmail
      properties:
        userEmail:
          type: string
          example: "test@test.com"
          description: unique identifier of user
        role:
          type: string
          enum: [ CLIENT, PROJECT_MANAGER, ADMIN ]
    productArea:
      properties:
        id:
          type: integer
          example: "1"
        name:
          type: string
          example: "Kredit"
        category:
          type: string
          example: "Privat"
    deleteUserProject:
      type: object
      required:
        - userID
      properties:
        userID:
          type: string
          example: "0fef539d-69be-4013-9380-6a12c3534c67"
          description: unique identifier of user

  responses:
    5XXserverError:
      description: Internal error
      content:
        application/json:
          schema:
            type: string
    404notfound:
      description: resource not found
    403forbidden:
      description: User is not authorized to access this resource
      content:
        application/json:
          schema:
            type: string
    401unauthorized:
      description: User not authenticated
      content:
        application/json:
          schema:
            type: string
    400badrequest:
      description: request is missing required information
      content:
        application/json:
          schema:
            type: string
    genericError:
      description: Error