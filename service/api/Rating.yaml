openapi: '3.0.0'
info:
  version: '0.1'
  title: "API for AMOS5 Financial QuickCheck"
  description: defines endpoints for resource "Rating" and "ProductRating"

paths:
  /products/{productID}/ratings:
    get:
      summary: retrieve data for economic and/or complexity rating for projectID
      parameters:
        - $ref: '#/components/parameters/productID'
        - $ref: '#/components/parameters/ratingArea'
      responses:
        200:
          description: JSON containing all ratings for productID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'  
    post:
      summary: create data for economic or complexity rating
      parameters: 
        - $ref: '#/components/parameters/productID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        201:
          description: Rating successful created.
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'
    put:
      summary: updates data for economic or complexity rating
      parameters: 
        - $ref: '#/components/parameters/productID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        200:
          description: JSON containing all ratings for productID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        404:
          $ref: '#/components/responses/404notfound'
        '5XX':
          $ref: '#/components/responses/5XXserverError'      
          

  /ratings:
    get:
      summary: retrieve data for economic and/or complexity rating
      parameters:
        - $ref: '#/components/parameters/ratingArea'
      responses:
        200:
          description: JSON containing all ratings 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/rating'
        401:
          $ref: '#/components/responses/401unauthorized'
        403:
          $ref: '#/components/responses/403forbidden'
        '5XX':
          $ref: '#/components/responses/5XXserverError'

components:
  parameters:
    productID:
      in: path
      name: productID
      required: true
      schema:
        type: integer
      description: unique product ID
    ratingArea:
      in: query
      name: ratingArea
      required: false
      schema:
        type: string
        enum: [ECONOMIC, COMPLEXITY]
      description: attribute to distinguish between data for complexity and economic rating

  schemas:
    product:
      type: object
      properties:
        productName:
          type: string
          example: "Optionen"
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/productRating'
    productRating:
      type: object
      properties:
        ratingID:
          type: integer
          example: 111
        answer:
          type: string
          example: "an answer to a question or the volume of an economic criterion"
        comment:
          type: string
          example: "a comment to an answer or an economic criterion"
        score:
          type: string
          enum: [HOCH, MITTEL, GERING]
    rating:
      type: object
      properties:
        ratingID:
          type: integer
          example: 111
        category:
          type: string
          example: "Komplexit√§tstreiber oder Gruppierung von Finanzkriterien"
        criterion:
          type: string
          example: "question or criterion to be analysed"
        ratingArea:
          type: string
          enum: [ECONOMIC, COMPLEXITY]
    
    

  responses:
    5XXserverError:
      description: Internal error
    404notfound:
      description: Resource does not exist
    403forbidden:
      description: User is not authorized to access this resource
    401unauthorized:
      description: User not authenticated
    genericError:
      description: Error