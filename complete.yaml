openapi: 3.0.0
info:
  version: "0.3"
  title: API for AMOS5 Financial QuickCheck
  description: defines endpoints for resource "Project"
paths:
  /productareas:
    get:
      summary: retrieves all product areas
      responses:
        "200":
          description: returns list of product area objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/productArea"
        "404":
          description: Resource does not exist.
  /ratings:
    get:
      summary: retrieves all ratings for economic and/or complexity rating area
      parameters:
        - in: query
          name: ratingArea
          required: false
          description: attribute assigning rating to either complexity or economic rating
            area
          schema:
            type: string
            description: assigns rating to economic analysis or complexity analysis
            enum:
              - ECONOMIC
              - COMPLEXITY
            example: ECONOMIC
      responses:
        "200":
          description: returns list of rating objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ratingID:
                      type: integer
                      description: unique identifier of a rating
                      example: 4
                    category:
                      type: string
                      description: grouping of ratings within ECONOMIC or COMPLEXITY ratingArea
                      example: ""
                    criterion:
                      type: string
                      description: a question or criteria to be analysed in economic or complexity
                        rating
                      example: Kreditvolumen im Bestand
                    ratingArea:
                      $ref: "#/paths/~1ratings/get/parameters/0/schema"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          description: Internal error
  /projects:
    get:
      summary: retrieves all projects
      responses:
        "200":
          description: returns list of project objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    projectID:
                      type: integer
                      description: unique identifier of project
                      example: 10
                    projectName:
                      type: string
                      description: a name of the project for display purposes
                      example: DKB
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    post:
      summary: creates a new project
      requestBody:
        description: project object
        required: true
        content:
          application/json:
            schema:
              required:
                - creatorID
                - projectName
                - productAreas
                - members
              properties:
                creatorID:
                  type: string
                  format: uuid
                  description: unique identifier of user
                  example: 0fef539d-69be-4013-9380-6a12c3534c67
                projectName:
                  $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                    ems/properties/projectName"
                productAreas:
                  type: array
                  example:
                    - 1
                    - 2
                    - 3
                  items:
                    type: integer
                    description: unique identifiers of product areas
                members:
                  type: array
                  items:
                    properties:
                      userID:
                        $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                          perties/creatorID"
                      userEmail:
                        type: string
                        format: email
                        description: unique identifier of user
                        example: max@mustermann.com
                      role:
                        type: string
                        description: assigned project role to a user
                        enum:
                          - CLIENT
                          - PROJECT_MANAGER
                          - ADMIN
                        example: PROJECT_MANAGER
      responses:
        "201":
          description: returns list of project objects containing project meta data
          content:
            application/json:
              schema:
                properties:
                  projectID:
                    $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                      ems/properties/projectID"
                  creatorID:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/creatorID"
                  projectName:
                    $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                      ems/properties/projectName"
                  productAreas:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          description: unique identifier of product area
                          example: "6"
                        name:
                          type: string
                          example: Kredit
                        category:
                          type: string
                          example: Privat
                  members:
                    type: array
                    items:
                      properties:
                        userID:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/creatorID"
                        userEmail:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/members/items/properties/userEmail"
                        role:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/members/items/properties/role"
        "400":
          description: Input is missing/incorrect.
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/projects/{projectID}":
    get:
      summary: retrieves one project
      parameters:
        - name: projectID
          in: path
          required: true
          description: unique identifier of project
          schema:
            $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
              ems/properties/projectID"
      responses:
        "200":
          description: returns project object containing project meta data
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectID:
                    $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                      ems/properties/projectID"
                  creatorID:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/creatorID"
                  projectName:
                    $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                      ems/properties/projectName"
                  members:
                    type: array
                    items:
                      properties:
                        userID:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/creatorID"
                        userEmail:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/members/items/properties/userEmail"
                        userName:
                          type: string
                          description: a name of the user for display purposes
                          example: Max Mustermann
                        role:
                          $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                            perties/members/items/properties/role"
                  productAreas:
                    type: array
                    items:
                      $ref: "#/paths/~1projects/post/responses/201/content/application~1json/schema/p\
                        roperties/productAreas/items"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    put:
      summary: updates one project
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
      requestBody:
        description: project object
        required: true
        content:
          application/json:
            schema:
              required:
                - members
              properties:
                projectName:
                  $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                    ems/properties/projectName"
                productAreas:
                  type: array
                  example:
                    - 1
                    - 2
                    - 3
                  items:
                    type: integer
                    description: unique identifiers of product areas
                members:
                  type: array
                  items:
                    properties:
                      userID:
                        $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                          perties/creatorID"
                      userEmail:
                        $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                          perties/members/items/properties/userEmail"
                      role:
                        $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                          perties/members/items/properties/role"
      responses:
        "200":
          description: returns project object containing project meta data
          content:
            application/json:
              schema:
                $ref: "#/paths/~1projects~1%7BprojectID%7D/get/responses/200/content/applicatio\
                  n~1json/schema"
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/projects/{projectID}/users":
    post:
      summary: assigns users to projectID
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
      requestBody:
        description: list of user objects
        content:
          application/json:
            schema:
              type: array
              items:
                required:
                  - role
                  - userEmail
                properties:
                  userEmail:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/members/items/properties/userEmail"
                  role:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/members/items/properties/role"
      responses:
        "201":
          description: returns list of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    userID:
                      $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                        perties/creatorID"
                    userEmail:
                      $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                        perties/members/items/properties/userEmail"
                    role:
                      $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                        perties/members/items/properties/role"
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    put:
      summary: updates users for projectID
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
      requestBody:
        description: list of user objects
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  userID:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/creatorID"
                  role:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/members/items/properties/role"
      responses:
        "200":
          description: returns list of user objects
          content:
            application/json:
              schema:
                $ref: "#/paths/~1projects~1%7BprojectID%7D~1users/post/responses/201/content/ap\
                  plication~1json/schema"
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    delete:
      summary: unassigns users from project
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
      requestBody:
        description: list of user objects
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  userID:
                    $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                      perties/creatorID"
      responses:
        "200":
          description: success
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/projects/{projectID}/results":
    get:
      summary: retrieves list of evaluations for all products in project and/or
        product area
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
        - name: productAreaID
          in: query
          required: false
          description: unique identifier of product area
          schema:
            type: integer
            description: unique identifier of product area
            example: "6"
      responses:
        "200":
          description: returns list of result objects
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    productID:
                      type: integer
                      description: unique identifier of product
                      example: "99"
                    productName:
                      type: string
                      description: name of the product for display purposes
                      example: Optionen
                    ratings:
                      type: array
                      description: list containing ratings of "Kreditvolumen im Bestand" (= size of
                        pie), "Marge" (= y-axis) and "Kunde" (= outer circle
                        values)
                      items:
                        type: object
                        properties:
                          rating:
                            type: object
                            properties:
                              ratingID:
                                $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                  ms/properties/ratingID"
                              category:
                                $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                  ms/properties/category"
                              criterion:
                                $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                  ms/properties/criterion"
                              ratingArea:
                                $ref: "#/paths/~1ratings/get/parameters/0/schema"
                          answer:
                            type: string
                            description: an answer to a product rating
                            example: 700 Mio. EUR
                          comment:
                            type: string
                            description: a comment to a product rating or a product
                            example: some comment
                          score:
                            type: string
                            description: a score to a product rating
                            enum:
                              - HOCH
                              - MITTEL
                              - GERING
                            example: GERING
                    scores:
                      type: array
                      description: aggregated values of field "Gesamteinschätzung wirtschaftlicher
                        Bewertung" for productvariants
                      items:
                        properties:
                          score:
                            $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                              pplication~1json/schema/items/properties/ratings/\
                              items/properties/score"
                          count:
                            type: integer
                            example: 4
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/projects/{projectID}/products":
    get:
      summary: retrieves all products of given projectID
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
        - $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/parameters/1"
      responses:
        "200":
          description: returns list of product objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productID:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                        pplication~1json/schema/items/properties/productID"
                    productName:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                        pplication~1json/schema/items/properties/productName"
                    productArea:
                      $ref: "#/paths/~1projects/post/responses/201/content/application~1json/schema/p\
                        roperties/productAreas/items"
                    projectID:
                      $ref: "#/paths/~1projects/get/responses/200/content/application~1json/schema/it\
                        ems/properties/projectID"
                    parentID:
                      type: integer
                      description: unique identifier of parent product, return value of 0 indicates
                        that product does not have a parent
                      example: "100"
                    progressComplexity:
                      type: integer
                      example: 23
                      description: returns a value between 0 and 100, which indicates the progress of
                        the rating
                    progressEconomic:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                        application~1json/schema/items/properties/progressCompl\
                        exity"
                    comment:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                        pplication~1json/schema/items/properties/ratings/items/\
                        properties/comment"
                    resources:
                      type: array
                      items:
                        type: string
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    post:
      summary: creates a new product for projectID
      parameters:
        - $ref: "#/paths/~1projects~1%7BprojectID%7D/get/parameters/0"
      requestBody:
        description: product object
        content:
          application/json:
            schema:
              type: object
              required:
                - productName
                - productArea
              properties:
                productName:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                    pplication~1json/schema/items/properties/productName"
                productArea:
                  properties:
                    id:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/parameters/1/schema"
                comment:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                    pplication~1json/schema/items/properties/ratings/items/prop\
                    erties/comment"
                resources:
                  type: array
                  items:
                    $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                      application~1json/schema/items/properties/resources/items"
                parentID:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                    application~1json/schema/items/properties/parentID"
                productVariations:
                  type: array
                  items:
                    type: object
                    required:
                      - productName
                    properties:
                      productName:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                          pplication~1json/schema/items/properties/productName"
                      comment:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                          pplication~1json/schema/items/properties/ratings/item\
                          s/properties/comment"
                      resources:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/post/requestBody/content/a\
                          pplication~1json/schema/properties/resources"
      responses:
        "201":
          description: returns a list of product objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                    application~1json/schema/items"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/products/{productID}":
    get:
      summary: retrieves data for one product
      parameters:
        - in: path
          name: productID
          required: true
          description: unique identifier of product
          schema:
            $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
              pplication~1json/schema/items/properties/productID"
      responses:
        "200":
          description: returns a product object
          content:
            application/json:
              schema:
                $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                  application~1json/schema/items"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    put:
      summary: updates product with given productID
      parameters:
        - $ref: "#/paths/~1products~1%7BproductID%7D/get/parameters/0"
      requestBody:
        required: true
        description: product object
        content:
          application/json:
            schema:
              type: object
              properties:
                productName:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                    pplication~1json/schema/items/properties/productName"
                comment:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                    pplication~1json/schema/items/properties/ratings/items/prop\
                    erties/comment"
                resources:
                  type: array
                  items:
                    $ref: "#/paths/~1projects~1%7BprojectID%7D~1products/get/responses/200/content/\
                      application~1json/schema/items/properties/resources/items"
      responses:
        "200":
          description: Update successful
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/products/{productID}/ratings":
    get:
      summary: retrieves all data for economic and/or complexity rating for productID
      parameters:
        - $ref: "#/paths/~1products~1%7BproductID%7D/get/parameters/0"
        - $ref: "#/paths/~1ratings/get/parameters/0"
      responses:
        "200":
          description: returns list of ratings for productID
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    type: string
                    example: Optionen
                  ratings:
                    type: array
                    items:
                      type: object
                      properties:
                        rating:
                          type: object
                          properties:
                            ratingID:
                              $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                ms/properties/ratingID"
                            category:
                              $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                ms/properties/category"
                            criterion:
                              $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                                ms/properties/criterion"
                            ratingArea:
                              $ref: "#/paths/~1ratings/get/parameters/0/schema"
                        answer:
                          $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                            pplication~1json/schema/items/properties/ratings/it\
                            ems/properties/answer"
                        comment:
                          $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                            pplication~1json/schema/items/properties/ratings/it\
                            ems/properties/comment"
                        score:
                          $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                            pplication~1json/schema/items/properties/ratings/it\
                            ems/properties/score"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    post:
      summary: create data for economic or complexity rating
      parameters:
        - $ref: "#/paths/~1products~1%7BproductID%7D/get/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - ratings
              type: object
              properties:
                ratings:
                  type: array
                  items:
                    type: object
                    properties:
                      ratingID:
                        $ref: "#/paths/~1ratings/get/responses/200/content/application~1json/schema/ite\
                          ms/properties/ratingID"
                      answer:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                          pplication~1json/schema/items/properties/ratings/item\
                          s/properties/answer"
                      comment:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                          pplication~1json/schema/items/properties/ratings/item\
                          s/properties/comment"
                      score:
                        $ref: "#/paths/~1projects~1%7BprojectID%7D~1results/get/responses/200/content/a\
                          pplication~1json/schema/items/properties/ratings/item\
                          s/properties/score"
      responses:
        "201":
          description: returns list of rating objects for productID
          content:
            application/json:
              schema:
                $ref: "#/paths/~1products~1%7BproductID%7D~1ratings/post/requestBody/content/ap\
                  plication~1json/schema"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    put:
      summary: updates data for economic or complexity rating
      parameters:
        - $ref: "#/paths/~1products~1%7BproductID%7D/get/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1products~1%7BproductID%7D~1ratings/post/requestBody/content/ap\
                plication~1json/schema"
      responses:
        "200":
          description: returns list of rating objects for productID
          content:
            application/json:
              schema:
                $ref: "#/paths/~1products~1%7BproductID%7D~1ratings/post/requestBody/content/ap\
                  plication~1json/schema"
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  /users:
    get:
      summary: retrieves list of all users
      responses:
        "200":
          description: returns list of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                        perties/creatorID"
                    userEmail:
                      $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                        perties/members/items/properties/userEmail"
                    userName:
                      $ref: "#/paths/~1projects~1%7BprojectID%7D/get/responses/200/content/applicatio\
                        n~1json/schema/properties/members/items/properties/user\
                        Name"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    post:
      summary: creates a new user
      requestBody:
        description: user object
        content:
          application/json:
            schema:
              required:
                - userEmail
                - password
              type: object
              properties:
                userEmail:
                  $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                    perties/members/items/properties/userEmail"
                userName:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D/get/responses/200/content/applicatio\
                    n~1json/schema/properties/members/items/properties/userName"
                password:
                  type: string
                  description: user pw for login, no restrictions about length or characters
                    currently
                  example: ajdvcbwocdnxa
      responses:
        "201":
          description: returns user object
          content:
            application/json:
              schema:
                $ref: "#/paths/~1users/get/responses/200/content/application~1json/schema/items"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
  "/users/email/{userEmail}":
    get:
      summary: retrieve user data based on email
      parameters:
        - name: userEmail
          in: path
          required: true
          description: unique identifier of user in form of an email address
          schema:
            $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
              perties/members/items/properties/userEmail"
      responses:
        "200":
          description: returns user object
          content:
            application/json:
              schema:
                $ref: "#/paths/~1users/get/responses/200/content/application~1json/schema/items"
        "400":
          $ref: "#/paths/~1projects/post/responses/400"
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
    put:
      summary: updates user with given email adress
      parameters:
        - $ref: "#/paths/~1users~1email~1%7BuserEmail%7D/get/parameters/0"
      requestBody:
        required: true
        description: user object
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                    perties/creatorID"
                userEmail:
                  $ref: "#/paths/~1projects/post/requestBody/content/application~1json/schema/pro\
                    perties/members/items/properties/userEmail"
                userName:
                  $ref: "#/paths/~1projects~1%7BprojectID%7D/get/responses/200/content/applicatio\
                    n~1json/schema/properties/members/items/properties/userName"
                password:
                  $ref: "#/paths/~1users/post/requestBody/content/application~1json/schema/proper\
                    ties/password"
      responses:
        "200":
          description: Update successsful.
        "404":
          $ref: "#/paths/~1productareas/get/responses/404"
        5XX:
          $ref: "#/paths/~1ratings/get/responses/5XX"
components:
  schemas:
    userID:
      type: string
      format: uuid
      description: unique identifier of user
      example: 0fef539d-69be-4013-9380-6a12c3534c67
    userEmail:
      type: string
      format: email
      description: unique identifier of user
      example: max@mustermann.com
    userName:
      type: string
      description: a name of the user for display purposes
      example: Max Mustermann
    password:
      type: string
      description: user pw for login, no restrictions about length or characters currently
      example: ajdvcbwocdnxa
    role:
      type: string
      description: assigned project role to a user
      enum:
        - CLIENT
        - PROJECT_MANAGER
        - ADMIN
      example: PROJECT_MANAGER
    creatorID:
      $ref: "#/components/schemas/userID"
    projectID:
      type: integer
      description: unique identifier of project
      example: 10
    projectName:
      type: string
      description: a name of the project for display purposes
      example: DKB
    productID:
      type: integer
      description: unique identifier of product
      example: "99"
    productName:
      type: string
      description: name of the product for display purposes
      example: Optionen
    productArea:
      properties:
        id:
          type: integer
          description: unique identifier of product area
          example: "6"
        name:
          type: string
          example: Kredit
        category:
          type: string
          example: Privat
    parentID:
      type: integer
      description: unique identifier of parent product, return value of 0 indicates
        that product does not have a parent
      example: "100"
    resource:
      type: string
    ratingID:
      type: integer
      description: unique identifier of a rating
      example: 4
    category:
      type: string
      description: grouping of ratings within ECONOMIC or COMPLEXITY ratingArea
      example: ""
    criterion:
      type: string
      description: a question or criteria to be analysed in economic or complexity rating
      example: Kreditvolumen im Bestand
    ratingArea:
      type: string
      description: assigns rating to economic analysis or complexity analysis
      enum:
        - ECONOMIC
        - COMPLEXITY
      example: ECONOMIC
    answer:
      type: string
      description: an answer to a product rating
      example: 700 Mio. EUR
    comment:
      type: string
      description: a comment to a product rating or a product
      example: some comment
    score:
      type: string
      description: a score to a product rating
      enum:
        - HOCH
        - MITTEL
        - GERING
      example: GERING
